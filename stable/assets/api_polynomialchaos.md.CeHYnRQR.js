import{_ as n,C as o,c as l,o as r,ai as s,j as e,G as t,a as p,w as d}from"./chunks/framework.lmUIWU9q.js";const _=JSON.parse('{"title":"Polynomial Chaos Expansion","description":"","frontmatter":{},"headers":[],"relativePath":"api/polynomialchaos.md","filePath":"api/polynomialchaos.md","lastUpdated":null}'),h={name:"api/polynomialchaos.md"},c={class:"jldocstring custom-block",open:""};function m(k,a,u,y,f,g){const i=o("Badge");return r(),l("div",null,[a[4]||(a[4]=s('<h1 id="Polynomial-Chaos-Expansion" tabindex="-1">Polynomial Chaos Expansion <a class="header-anchor" href="#Polynomial-Chaos-Expansion" aria-label="Permalink to &quot;Polynomial Chaos Expansion {#Polynomial-Chaos-Expansion}&quot;">​</a></h1><h2 id="Index" tabindex="-1">Index <a class="header-anchor" href="#Index" aria-label="Permalink to &quot;Index {#Index}&quot;">​</a></h2><ul><li><a href="#UncertaintyQuantification.WeightedApproximateFetekePoints"><code>UncertaintyQuantification.WeightedApproximateFetekePoints</code></a></li></ul><h2 id="Types" tabindex="-1">Types <a class="header-anchor" href="#Types" aria-label="Permalink to &quot;Types {#Types}&quot;">​</a></h2>',4)),e("details",c,[e("summary",null,[a[0]||(a[0]=e("a",{id:"UncertaintyQuantification.WeightedApproximateFetekePoints",href:"#UncertaintyQuantification.WeightedApproximateFetekePoints"},[e("span",{class:"jlbinding"},"UncertaintyQuantification.WeightedApproximateFetekePoints")],-1)),a[1]||(a[1]=p()),t(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),a[3]||(a[3]=s('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WeightedApproximateFetekePoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMonteCarlo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; fadd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fmult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Struct for performing weighted approximate Feteke points (wafp) subsampling of a Monte-Carlo sampler for use in generating a <code>PolynomialChaosExpansion</code>. Given a <code>PolynomialChaosBasis</code> of dimension <code>N</code>, and a Monte-Carlo sampler with <code>M</code> samples, generates a subsample of size <code>max(N,min(N+fadd,N+fmult,M))</code> biased towards maximizing the determinant of the Gramian typically requiring less than <code>M</code> model evaluations. Follows procedure described in [<a href="/UncertaintyQuantification.jl/stable/references#burkEfficientSampling">39</a>].</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:d(()=>[...a[2]||(a[2]=[e("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/a12ee80367973be60529001dc130f6b0b39f4257/src/models/pce/polynomialchaosexpansion.jl#L12-L19",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const b=n(h,[["render",m]]);export{_ as __pageData,b as default};
