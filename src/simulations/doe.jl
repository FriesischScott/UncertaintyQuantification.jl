
struct TwoLevelFactorial <: AbstractDesignOfExperiments
    σ::Int
    function TwoLevelFactorial(σ::Int=1)
        σ < 1 && error("sigma must be >= 1")
        return new(σ)
    end
end

struct FullFactorial <: AbstractDesignOfExperiments
    levels::Vector{<:Integer}
    σ::Int
    function FullFactorial(levels::Vector{<:Integer}, σ::Int=1)
        any(levels .< 2) && error("Levels must be >= 2")
        σ < 1 && error("sigma must be >= 1")
        return new(levels, σ)
    end
end

struct FractionalFactorial <: AbstractDesignOfExperiments
    columns::Vector{String}
    σ::Int
    function FractionalFactorial(columns::Vector{String}, σ::Int=1)
        σ < 1 && error("sigma must be >= 1")
        return new(columns, σ)
    end
end

struct BoxBehnken <: AbstractDesignOfExperiments
    centers::Union{Int,Nothing}
    σ::Int
    function BoxBehnken(centers::Union{Int,Nothing}=nothing, σ::Int=1)
        if !isnothing(centers) && centers < 0
            error("centers must be nonnegative")
        end
        σ < 1 && error("sigma must be >= 1")
        return new(centers, σ)
    end
end

struct CentralComposite <: AbstractDesignOfExperiments
    type::Symbol
    σ::Int
    function CentralComposite(type::Symbol, σ::Int=1)
        type ∉ [:inscribed, :face] && error("type must be :inscribed or :face.")
        σ < 1 && error("sigma must be >= 1")
        return new(type, σ)
    end
end

struct PlackettBurman <: AbstractDesignOfExperiments
    σ::Int
    function PlackettBurman(σ::Int=1)
        σ < 1 && error("sigma must be >= 1")
        return new(σ)
    end
end

function full_factorial_matrix(levels::Vector{<:Integer})
    ranges = [range(0.0, 1.0; length=l) for l in levels]
    return mapreduce(t -> [t...]', vcat, Iterators.product(ranges...))
end

function bounds(r::RandomVariable, σ::Int)
    lb = minimum(r)
    lb = isinf(lb) ? mean(r.dist) -std(r.dist) * σ : lb

    ub = maximum(r)
    ub = isinf(ub) ? mean(r.dist) +std(r.dist) * σ : ub

    return [lb ub]
end

function bounds(jd::JointDistribution, σ::Int)
    return reduce(vcat, bounds.(jd.marginals, σ))
end

function sample(inputs::Array{<:UQInput}, design::AbstractDesignOfExperiments)
    random_inputs = filter(i -> isa(i, RandomUQInput), inputs)

    deterministic_inputs = filter(i -> isa(i, DeterministicUQInput), inputs)

    n_rv = mapreduce(dimensions, +, random_inputs)

    samples = doe_samples(design, n_rv)
    b = reduce(vcat, bounds.(random_inputs, design.σ))

    for i in 1:n_rv
        samples[:, i] = samples[:, i] .* (b[i, 2] - b[i, 1]) .+ b[i, 1]
    end

    samples = DataFrame(names(random_inputs) .=> eachcol(samples))

    if !isempty(deterministic_inputs)
        #add deterministic inputs to each row (each point)
        samples = hcat(samples, sample(deterministic_inputs, size(samples, 1)))
    end

    return samples
end

function doe_samples(design::FullFactorial, _::Int=0)
    return full_factorial_matrix(design.levels)
end

function doe_samples(_::TwoLevelFactorial, rvs::Int)
    return full_factorial_matrix(fill(2, rvs))
end

function doe_samples(design::FractionalFactorial, _::Int=0)
    vars, varindex, gens, genindex = variables_and_generators(design.columns)

    frac = zeros(2^length(vars), length(design.columns))
    frac[:, varindex] = full_factorial_matrix(fill(2, length(vars)))

    for (i, g) in zip(genindex, gens)
        c = varindex[map(g -> findfirst(g, vars)[1], split(g, ""))]
        frac[:, i] = (length(c) .- [sum(row) for row in eachrow(frac[:, c])] .+ 1) .% 2
    end

    return frac
end

function variables_and_generators(columns::Vector{String})
    if any(isempty.(columns))
        error("Each String in columns must hold at least one character")
    end

    varindex = findall(length.(columns) .== 1)
    genindex = findall(length.(columns) .> 1)
    vars = [columns[i] for i in varindex]
    gens = filter(c -> c ∉ vars, columns)

    vars = join(vars)

    for g in gens
        if any(.!occursin.(split(g, ""), vars))
            error("All combinations of columns must also be individual columns.")
        end
    end

    return vars, varindex, gens, genindex
end

function doe_samples(design::BoxBehnken, rvs::Int)
    if isnothing(design.centers)
        centers = [1 1 3 3 6 6 6 8 10 10 12][min(rvs, 11)]
    else
        centers = design.centers
    end

    ff_columns, block = block_format(rvs)
    ff = FractionalFactorial(ff_columns)
    ff_matrix = doe_samples(ff)

    bb = map(eachrow(block)) do cols
        b = fill(0.5, size(ff_matrix, 1), rvs)
        b[:, cols] = ff_matrix
        return b
    end

    bb = vcat(bb...)
    return vcat(bb, fill(0.5, centers, rvs))
end

function block_format(nvars::Int)
    if nvars == 3
        return ["a", "b"], [1 2; 1 3; 2 3]
    elseif nvars == 4
        return ["a", "b"], [1 2; 1 3; 1 4; 2 3; 2 4; 3 4]
    elseif nvars == 5
        return ["a", "b"], [1 2; 1 3; 1 4; 1 5; 2 3; 2 4; 2 5; 3 4; 3 5; 4 5]
    elseif nvars == 6
        return ["a", "b", "c"], [1 4 5; 1 3 6; 1 2 4; 2 5 6; 2 3 5; 3 4 6]
    elseif nvars == 7
        return ["a", "b", "c"], [1 2 3; 1 4 6; 1 5 7; 2 5 6; 2 4 7; 3 4 5; 3 6 7]
    elseif nvars == 9
        return ["a", "b", "c"],
        [
            1 2 3
            1 4 5
            1 6 7
            1 8 9
            1 4 7
            2 4 6
            2 5 8
            2 7 9
            2 5 8
            3 5 7
            2 4 9
            3 6 8
            3 6 9
            4 7 8
            5 6 9
        ]
    elseif nvars == 10
        return ["a", "b", "c", "d"],
        [
            1 2 5 10
            1 4 7 8
            1 3 6 9
            1 8 9 10
            2 6 7 10
            2 3 7 8
            2 4 6 9
            3 4 5 10
            3 5 7 9
            4 5 6 8
        ]
    elseif nvars == 11
        return ["a", "b", "c", "d", "abcd"],
        [
            1 4 8 9 10
            1 3 6 10 11
            1 2 4 7 11
            1 2 3 5 8
            1 5 6 7 9
            2 5 9 10 11
            2 3 4 6 9
            2 6 7 8 10
            3 7 8 9 11
            3 4 5 7 10
            4 5 6 8 11
        ]
    elseif nvars == 12
        return ["a", "b", "c", "d"],
        [
            1 2 5 7
            1 7 8 11
            1 3 9 10
            1 4 6 12
            2 3 6 8
            2 8 9 12
            2 4 10 11
            3 4 7 9
            3 5 11 12
            4 5 8 10
            5 6 9 11
            6 7 10 12
        ]
    elseif nvars == 16
        return ["a", "b", "c", "d"],
        [
            1 2 6 9
            1 4 5 12
            1 9 10 14
            1 5 8 16
            1 3 13 15
            1 7 11 13
            2 3 7 10
            2 4 14 16
            2 5 6 13
            2 10 11 15
            2 8 12 14
            3 4 8 11
            3 6 7 14
            3 11 12 16
            3 5 9 15
            4 7 8 15
            4 9 12 13
            4 6 10 16
            5 10 13 14
            5 7 9 11
            6 11 14 15
            6 8 10 12
            7 12 15 16
            8 9 13 16
        ]
    elseif nvars > 0
        return ["a", "b"], blocks(nvars)
    end
end

function blocks(vars::Int)
    block = zeros(Int, 1, 2)
    for i in 1:(vars - 1), j in (i + 1):vars
        block = vcat(block, [i j])
    end
    return block[2:end, :]
end

function doe_samples(design::CentralComposite, rvs::Int)
    two_lvl_points = full_factorial_matrix(fill(2, rvs))
    axial_points = fill(0.5, 2 * rvs + 1, rvs)

    if (design.type == :inscribed)
        # shortening "corner points" distance from origin
        two_lvl_points = @. 0.5 + 1 / (2 * sqrt(rvs)) * (-1)^(two_lvl_points + 1)
    end

    # setting axial points
    for i in 1:rvs
        axial_points[(2i - 1):(2i), i] = [1.0, 0]
    end

    return vcat(two_lvl_points, axial_points)
end

function doe_samples(_::PlackettBurman, nvars::Int)
    nvars < 2 && error("number of random variables must be in 2:47")
    nvars > 47 && error("number of random variables must be in 2:47")
    if nvars < 4
        m = doe_samples(FractionalFactorial(["a", "b", "ab"]))
    elseif nvars < 8
        m = doe_samples(FractionalFactorial(["a", "b", "c", "ab", "ac", "bc", "abc"]))
    elseif nvars < 12
        m = [
            1 1 1 1 1 1 1 1 1 1 1
            1 1 1 1 0 0 0 1 0 0 0
            1 1 0 0 0 1 0 0 1 0 1
            1 0 1 0 1 1 1 0 0 0 0
            1 0 0 1 0 0 1 0 1 1 0
            1 0 0 0 1 0 0 1 0 1 1
            0 1 1 0 0 0 1 0 0 1 1
            0 1 0 1 1 1 0 0 0 1 0
            0 1 0 0 1 0 1 1 1 0 0
            0 0 1 1 1 0 0 0 1 0 1
            0 0 1 0 0 1 0 1 1 1 0
            0 0 0 1 0 1 1 1 0 0 1
        ]
    elseif nvars < 16
        m = doe_samples(
            FractionalFactorial([
                "a",
                "b",
                "c",
                "d",
                "ab",
                "ac",
                "ad",
                "bc",
                "bd",
                "cd",
                "abc",
                "abd",
                "acd",
                "bcd",
                "abcd",
            ]),
        )
    elseif nvars < 20
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
            1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1
            1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1 1
            1 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1 1 1 0
            1 1 0 0 0 0 1 1 0 0 1 0 0 1 1 1 1 0 0
            1 0 1 1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0
            1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1 1 1
            1 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 0 1 0
            1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 0 1
            1 0 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 0
            0 1 1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0
            0 1 1 1 0 1 0 1 0 0 0 0 1 1 0 0 1 0 1
            0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0
            0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 0 1 1 0
            0 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0 0 1
            0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0 0
            0 0 1 0 0 0 0 1 1 0 0 1 0 0 1 1 1 1 1
            0 0 0 1 1 1 1 0 1 0 1 0 0 0 0 1 1 0 1
            0 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 0 1 0
            0 0 0 0 0 1 1 0 0 1 0 0 1 1 1 1 0 1 1
        ]
    elseif nvars < 24
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
            1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1
            1 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 0
            1 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 0
            1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1
            1 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 0
            1 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 0
            1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1
            1 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 0
            1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1
            1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1
            1 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 0
            0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0
            0 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 1
            0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0
            0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0
            0 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 1
            0 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 1
            0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0
            0 0 1 1 0 0 1 1 0 0 1 0 1 0 0 0 0 0 1 1 1 1 1
            0 0 1 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 1
            0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0 0
            0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 0
            0 0 0 0 0 0 1 1 1 1 0 1 0 1 1 0 0 1 1 0 0 1 1
        ]
    elseif nvars < 28
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
            1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1
            1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1
            1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1
            1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 0
            1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 0
            1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 0
            1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 0
            1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 0
            1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0
            1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
            1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1
            1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1
            1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1
            0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 1
            0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 1
            0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 1
            0 1 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1
            0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0
            0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0
            0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0
            0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0
            0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0
            0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0
            0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 0 0 1
            0 0 0 1 0 0 1 1 0 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 1 0
            0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 0 0 1
            0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 0 1
        ]
    elseif nvars < 32
        m = doe_samples(
            FractionalFactorial([
                "a",
                "b",
                "c",
                "d",
                "e",
                "ab",
                "ac",
                "ad",
                "ae",
                "bc",
                "bd",
                "be",
                "cd",
                "ce",
                "de",
                "abc",
                "abd",
                "abe",
                "acd",
                "ace",
                "ade",
                "bcd",
                "bce",
                "bde",
                "cde",
                "abcd",
                "abce",
                "abde",
                "acde",
                "bcde",
                "abcde",
            ]),
        )
    elseif nvars < 36
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
            1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1
            1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1
            1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1
            1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1
            1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 0
            1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 0
            1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 0
            1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 0
            1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 0
            1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 0
            1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0
            1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 0
            1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1
            1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1
            1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1
            1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1
            1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1
            0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 1
            0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 1
            0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 1
            0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 1
            0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 1
            0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0
            0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0
            0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0
            0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0
            0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0
            0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0
            0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0
            0 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0
            0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 1
            0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 0 0 1
            0 0 0 1 0 1 0 0 1 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 1 0 1 0
            0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 1
            0 0 0 0 0 1 1 0 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 0 0 0 0 0 1 1 1 1 0 1
        ]
    elseif nvars < 40
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0
            1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 0
            1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 0
            1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 0
            1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 0
            1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1
            1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1
            1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1
            1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1
            1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1
            1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1
            1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1
            1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1
            1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1
            1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1
            1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 0
            1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 0
            1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 0
            1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 0
            1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 0
            0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0
            0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0
            0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0
            0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0
            0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0
            0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1
            0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 1
            0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 1
            0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 1
            0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 1
            0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 1
            0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 1
            0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 1
            0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 0 0 1 0 1 0 1 0 1 1 0 1 1
            0 0 1 0 1 0 1 0 1 1 0 1 0 0 1 0 1 1 0 0 1 0 1 1 0 1 0 1 0 1 0 0 1 1 0 0 1 1 1
            0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0
            0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0
            0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0
            0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0 0 0
            0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 0 1 1 0 0
        ]
    elseif nvars < 44
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
            1 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 0
            1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1
            1 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 0
            1 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 0
            1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1
            1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1
            1 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 0
            1 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 0
            1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1
            1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1
            1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1
            1 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 0
            1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1
            1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 0
            1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 0
            1 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 0
            1 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 0
            1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1
            1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1
            1 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 0
            1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1
            0 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 1
            0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0
            0 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 1
            0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0
            0 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 1
            0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0
            0 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 1
            0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0
            0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0
            0 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 1
            0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0
            0 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 1
            0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0
            0 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 1
            0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0
            0 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1
            0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0
            0 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 1
            0 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 1
            0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0
            0 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0 0 0 0 1
            0 0 0 0 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 0 0 1 0 1 1 1 0
        ]
    elseif nvars < 48
        m = [
            1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
            1 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 0
            1 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0
            1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1
            1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1
            1 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 0
            1 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0
            1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1
            1 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 0
            1 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 0
            1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1
            1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1
            1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1
            1 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 0
            1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1
            1 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 0
            1 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 0
            1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1
            1 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 0
            1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1
            1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1
            1 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 0
            1 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 0
            1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1
            0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0
            0 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 1
            0 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 1
            0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0
            0 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 1
            0 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 1
            0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0
            0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0
            0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0
            0 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 1
            0 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 1
            0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0
            0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0
            0 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 1
            0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 1
            0 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 1
            0 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 1
            0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0
            0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0
            0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0
            0 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 1
            0 0 0 1 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0
            0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0
            0 0 0 0 0 0 1 1 1 1 0 1 1 1 1 0 0 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 1 0 1 1 0 0 0 1
        ]
    end

    return m[:, 1:nvars]
end
