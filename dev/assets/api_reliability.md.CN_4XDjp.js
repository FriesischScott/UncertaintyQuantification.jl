import{_ as o,C as r,c as p,o as d,ai as e,j as t,G as s,a as n,w as l}from"./chunks/framework.DEaZx5le.js";const T=JSON.parse('{"title":"Reliability","description":"","frontmatter":{},"headers":[],"relativePath":"api/reliability.md","filePath":"api/reliability.md","lastUpdated":null}'),h={name:"api/reliability.md"},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""};function m(E,i,U,_,F,Q){const a=r("Badge");return d(),p("div",null,[i[28]||(i[28]=e('<h1 id="reliability" tabindex="-1">Reliability <a class="header-anchor" href="#reliability" aria-label="Permalink to &quot;Reliability&quot;">​</a></h1><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#UncertaintyQuantification.DoubleLoop"><code>UncertaintyQuantification.DoubleLoop</code></a></li><li><a href="#UncertaintyQuantification.FORM"><code>UncertaintyQuantification.FORM</code></a></li><li><a href="#UncertaintyQuantification.RandomSlicing"><code>UncertaintyQuantification.RandomSlicing</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, FORM}"><code>UncertaintyQuantification.probability_of_failure</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, AbstractMonteCarlo}"><code>UncertaintyQuantification.probability_of_failure</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, DoubleLoop}"><code>UncertaintyQuantification.probability_of_failure</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, RandomSlicing}"><code>UncertaintyQuantification.probability_of_failure</code></a></li></ul><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2>',4)),t("details",c,[t("summary",null,[i[0]||(i[0]=t("a",{id:"UncertaintyQuantification.FORM",href:"#UncertaintyQuantification.FORM"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.FORM")],-1)),i[1]||(i[1]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FORM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,fdm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDifferencesMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralFiniteDifferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>used to perform the first order reliability method using the HLRF algorithm with <code>n</code> iterations and tolerance <code>tol</code>. Gradients are estimated through <code>fdm</code>.</p><p><strong>References</strong></p><p>[<a href="/UncertaintyQuantification.jl/dev/references#rackwitzStructuralReliability1978">12</a>]</p>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/form.jl#L1-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),t("details",u,[t("summary",null,[i[4]||(i[4]=t("a",{id:"UncertaintyQuantification.DoubleLoop",href:"#UncertaintyQuantification.DoubleLoop"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.DoubleLoop")],-1)),i[5]||(i[5]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoubleLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Used to estimate imprecise reliability with the <em>double loop</em> Monte Carlo method.</p><p>Wraps two simulation objects — one for lower-bound (<code>lb</code>) and one for upper-bound (<code>ub</code>).</p><p>The two simulations can differ in simulation type, complexity, or accuracy settings, since estimating the lower bound often requires more simulation effort.</p><p>This approach runs an optimisation loop over interval parameters (outer loop) and computes reliability bounds in an inner loop using the <code>lb</code> and <code>ub</code> simulation methods.</p><p>Use <code>DoubleLoop(sim::AbstractSimulation)</code> for creating a <code>DoubleLoop</code> with same simulation method for both bounds.</p>',6)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/probabilityoffailure_imprecise.jl#L2-L14",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),t("details",k,[t("summary",null,[i[8]||(i[8]=t("a",{id:"UncertaintyQuantification.RandomSlicing",href:"#UncertaintyQuantification.RandomSlicing"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.RandomSlicing")],-1)),i[9]||(i[9]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RandomSlicing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Used to estimate imprecise reliability with <em>random slicing</em> Monte Carlo method, sometimes known as interval Monte Carlo.</p><p>Wraps two simulation objects — one for lower-bound (<code>lb</code>) and one for upper-bound (<code>ub</code>).</p><p>The two simulations can differ in simulation type, complexity, or accuracy settings, since estimating the lower bound often requires more simulation effort.</p><p>In this approach, the <code>lb</code> and <code>ub</code> simulation methods generate random intervals from the imprecise variables. These intervals are then propagated through the model via optimisation-based interval propagation, yielding lower and upper bounds on the reliability estimate.</p><p>Use <code>RandomSlicing(sim::AbstractSimulation)</code> for creating a <code>RandomSlicing</code> with same simulation method for both bounds.</p><p><strong>References</strong></p><p>[<a href="/UncertaintyQuantification.jl/dev/references#alvarez2018estimation">20</a>]</p>',8)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/probabilityoffailure_imprecise.jl#L30-L46",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i[29]||(i[29]=t("h2",{id:"methods",tabindex:"-1"},[n("Methods "),t("a",{class:"header-anchor",href:"#methods","aria-label":'Permalink to "Methods"'},"​")],-1)),t("details",b,[t("summary",null,[i[12]||(i[12]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, FORM}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, FORM}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[13]||(i[13]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel},UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput},UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FORM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a reliability analysis using the first order reliability method (FORM), see <a href="/UncertaintyQuantification.jl/dev/api/reliability#UncertaintyQuantification.FORM"><code>FORM</code></a>. Returns the estimated probability of failure <code>pf</code>, the reliability index <code>β</code> and the design point <code>dp</code>.</p><p><strong>Examples</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pf, β, dp = probability_of_failure(model, performance, inputs, sim)</span></span></code></pre></div>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/form.jl#L24-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),t("details",y,[t("summary",null,[i[16]||(i[16]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, AbstractMonteCarlo}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, AbstractMonteCarlo}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[17]||(i[17]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel},UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput},UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMonteCarlo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a reliability analysis with a standard Monte Carlo simulation. Returns the estimated probability of failure <code>pf</code>, the standard deviation <code>σ</code> and the <code>DataFrame</code> containing the evaluated <code>samples</code>. The simulation <code>sim</code> can be any instance of <code>AbstractMonteCarlo</code>.</p><p><strong>Examples</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pf, σ, samples = probability_of_failure(model, performance, inputs, sim)</span></span></code></pre></div>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[18]||(i[18]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/probabilityoffailure.jl#L1-L12",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),t("details",f,[t("summary",null,[i[20]||(i[20]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, DoubleLoop}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, DoubleLoop}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[21]||(i[21]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[23]||(i[23]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel}, UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput}, UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoubleLoop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform an <strong>imprecise reliability analysis</strong> using the <em>double loop</em> Monte Carlo method.</p><p>The inputs must include at least one imprecise variable.</p><p><strong>Returns</strong></p><ul><li><p><strong><code>pf_bounds</code></strong>: An <a href="/UncertaintyQuantification.jl/dev/api/inputs#UncertaintyQuantification.Interval"><code>Interval</code></a> giving the lower and upper bounds on the probability of failure.</p></li><li><p><strong><code>result_lb</code></strong>: The outputs of the reliability simulation that achieved the lower bound.</p></li><li><p><strong><code>result_ub</code></strong>: The outputs of the reliability simulation that achieved the upper bound.</p></li></ul><p>If the lower and upper bounds are equal, returns only the scalar probability of failure.</p><p>See <a href="/UncertaintyQuantification.jl/dev/api/reliability#UncertaintyQuantification.DoubleLoop"><code>DoubleLoop</code></a> for details of the random slicing configuration.</p>`,7)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[22]||(i[22]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/probabilityoffailure_imprecise.jl#L62-L82",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),t("details",g,[t("summary",null,[i[24]||(i[24]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, RandomSlicing}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, RandomSlicing}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[25]||(i[25]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel}, UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput}, UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RandomSlicing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform an <strong>imprecise reliability analysis</strong> using the <em>random slicing</em> Monte Carlo method</p><p>The inputs must include at least one imprecise variable.</p><p><strong>Returns</strong></p><ul><li><p><strong><code>pf_bounds</code></strong>: An <a href="/UncertaintyQuantification.jl/dev/api/inputs#UncertaintyQuantification.Interval"><code>Interval</code></a> giving the lower and upper bounds on the probability of failure.</p></li><li><p><strong><code>result_lb</code></strong>: The outputs of the reliability simulation that achieved the lower bound.</p></li><li><p><strong><code>result_ub</code></strong>: The outputs of the reliability simulation that achieved the upper bound.</p></li></ul><p>See <a href="/UncertaintyQuantification.jl/dev/api/reliability#UncertaintyQuantification.RandomSlicing"><code>RandomSlicing</code></a> for details of the random slicing configuration.</p>`,6)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[26]||(i[26]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ca1714384f2d34e6bc2ae9e3d20e78aa82b25bfb/src/reliability/probabilityoffailure_imprecise.jl#L175-L193",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})])])}const v=o(h,[["render",m]]);export{T as __pageData,v as default};
