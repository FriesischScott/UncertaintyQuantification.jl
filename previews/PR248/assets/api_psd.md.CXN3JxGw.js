import{_ as p,C as h,c as r,o as k,ai as e,j as s,G as t,a as n,w as l}from"./chunks/framework.-VC4WfIy.js";const A=JSON.parse('{"title":"Power Spectral Density Functions","description":"","frontmatter":{},"headers":[],"relativePath":"api/psd.md","filePath":"api/psd.md","lastUpdated":null}'),o={name:"api/psd.md"},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function u(E,i,F,C,f,b){const a=h("Badge");return k(),r("div",null,[i[16]||(i[16]=e('<h1 id="Power-Spectral-Density-Functions" tabindex="-1">Power Spectral Density Functions <a class="header-anchor" href="#Power-Spectral-Density-Functions" aria-label="Permalink to &quot;Power Spectral Density Functions {#Power-Spectral-Density-Functions}&quot;">​</a></h1><p>Construction and evaluation of different Power Spectral Density (PSD) functions. Correpsonding theory and literature can be found here <a href="/UncertaintyQuantification.jl/previews/PR248/manual/dynamics#Semi-empirical-PSD-functions">Semi-empirical-PSD-functions</a>.</p><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#UncertaintyQuantification.CloughPenzien-Tuple{AbstractVector{&lt;:Real}, Vararg{Real, 5}}"><code>UncertaintyQuantification.CloughPenzien</code></a></li><li><a href="#UncertaintyQuantification.EmpiricalPSD"><code>UncertaintyQuantification.EmpiricalPSD</code></a></li><li><a href="#UncertaintyQuantification.KanaiTajimi-Tuple{AbstractVector{&lt;:Real}, Real, Real, Real}"><code>UncertaintyQuantification.KanaiTajimi</code></a></li><li><a href="#UncertaintyQuantification.ShinozukaDeodatis-Tuple{AbstractVector{&lt;:Real}, Real, Real}"><code>UncertaintyQuantification.ShinozukaDeodatis</code></a></li></ul><h2 id="Types-of-PSD-functions" tabindex="-1">Types of PSD functions <a class="header-anchor" href="#Types-of-PSD-functions" aria-label="Permalink to &quot;Types of PSD functions {#Types-of-PSD-functions}&quot;">​</a></h2>',5)),s("details",d,[s("summary",null,[i[0]||(i[0]=s("a",{id:"UncertaintyQuantification.CloughPenzien-Tuple{AbstractVector{<:Real}, Vararg{Real, 5}}",href:"#UncertaintyQuantification.CloughPenzien-Tuple{AbstractVector{<:Real}, Vararg{Real, 5}}"},[s("span",{class:"jlbinding"},"UncertaintyQuantification.CloughPenzien")],-1)),i[1]||(i[1]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[3]||(i[3]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CloughPenzien</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ω</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S_0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ω_f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ζ_f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ω_g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ζ_g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a <code>CloughPenzien</code> instance representing a power spectral density function with the given parameters.</p><p><strong>Arguments / Parameters</strong></p><ul><li><p><code>ω::AbstractVector{&lt;:Real}</code>: A vector of angular frequencies.</p></li><li><p><code>S_0::Real</code>: A scaling factor.</p></li><li><p><code>ω_f::Real</code>: Frequency parameter for the first oscillator.</p></li><li><p><code>ζ_f::Real</code>: Damping ratio for the first oscillator.</p></li><li><p><code>ω_g::Real</code>: Frequency parameter for the second oscillator.</p></li><li><p><code>ζ_g::Real</code>: Damping ratio for the second oscillator.</p></li></ul><p><strong>Returns</strong></p><p>A discretized <code>CloughPenzien</code> power spectral density function specified by given arguments (parameters).</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ω_f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ζ_f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ω_g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ζ_g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cp_psd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CloughPenzien</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, S_0, ω_f, ζ_f, ω_g, ζ_g)</span></span></code></pre></div>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[s("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/9a44445fcd444ef1edaaa5f27b15476a0b1c1313/src/dynamics/psd.jl#L13-L39",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"UncertaintyQuantification.KanaiTajimi-Tuple{AbstractVector{<:Real}, Real, Real, Real}",href:"#UncertaintyQuantification.KanaiTajimi-Tuple{AbstractVector{<:Real}, Real, Real, Real}"},[s("span",{class:"jlbinding"},"UncertaintyQuantification.KanaiTajimi")],-1)),i[5]||(i[5]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KanaiTajimi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ω</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S_0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ω_0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ζ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KanaiTajimi</span></span></code></pre></div><p>Constructs a <code>KanaiTajimi</code> instance representing a power spectral density function with the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>ω::AbstractVector{&lt;:Real}</code>: A vector of angular frequencies.</p></li><li><p><code>S_0::Real</code>: A scaling factor.</p></li><li><p><code>ω_0::Real</code>: Natural frequency of the oscillator.</p></li><li><p><code>ζ::Real</code>: Damping ratio of the oscillator.</p></li></ul><p><strong>Returns</strong></p><p>A discretized <code>KanaiTajimi</code> power spectral density function specified by given arguments (parameters).</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">S_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ω_0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ζ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KanaiTajimi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, S_0, ω_0, ζ)</span></span></code></pre></div>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[s("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/9a44445fcd444ef1edaaa5f27b15476a0b1c1313/src/dynamics/psd.jl#L60-L82",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"UncertaintyQuantification.ShinozukaDeodatis-Tuple{AbstractVector{<:Real}, Real, Real}",href:"#UncertaintyQuantification.ShinozukaDeodatis-Tuple{AbstractVector{<:Real}, Real, Real}"},[s("span",{class:"jlbinding"},"UncertaintyQuantification.ShinozukaDeodatis")],-1)),i[9]||(i[9]=n()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ShinozukaDeodatis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ω</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, σ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Constructs a <code>ShinozukaDeodatis</code> instance representing a power spectral density function with the given parameters.</p><p><strong>Arguments</strong></p><ul><li><p><code>ω::AbstractVector{&lt;:Real}</code>: A vector of angular frequencies.</p></li><li><p><code>σ::Real</code>: A hyperparamter related to the variance of the stochastic process.</p></li><li><p><code>b::Real</code>: A parameter related to the correlation length of the stochastic process.</p></li></ul><p><strong>Returns</strong></p><p>A discretized <code>ShinozukaDeodatis</code> instance with the power spectral density function specified by given arguments (parameters).</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">σ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ShinozukaDeodatis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, σ, b)</span></span></code></pre></div>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[s("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/9a44445fcd444ef1edaaa5f27b15476a0b1c1313/src/dynamics/psd.jl#L109-L129",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",y,[s("summary",null,[i[12]||(i[12]=s("a",{id:"UncertaintyQuantification.EmpiricalPSD",href:"#UncertaintyQuantification.EmpiricalPSD"},[s("span",{class:"jlbinding"},"UncertaintyQuantification.EmpiricalPSD")],-1)),i[13]||(i[13]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EmpiricalPSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ω</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EmpiricalPSD</span></span></code></pre></div><p>Constructs an <code>EmpiricalPSD</code> instance with the given angular frequencies and manually provided power spectral density values.</p><p><strong>Arguments</strong></p><ul><li><p><code>ω::AbstractVector{&lt;:Real}</code>: A vector of angular frequencies.</p></li><li><p><code>p::AbstractVector{&lt;:Real}</code>: A vector of power spectral density values corresponding to the frequencies in <code>ω</code>.</p></li></ul><p><strong>Returns</strong></p><p>A discretized <code>EmpiricalPSD</code> instance with manually pre-specified provided power spectral density values.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p_values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example empirical PSD values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emp_psd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EmpiricalPSD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w, p_values)</span></span></code></pre></div>`,8)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[s("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/9a44445fcd444ef1edaaa5f27b15476a0b1c1313/src/dynamics/psd.jl#L139-L157",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})])])}const _=p(o,[["render",u]]);export{A as __pageData,_ as default};
