import{_ as o,C as r,c as p,o as d,ai as e,j as t,G as s,a as n,w as l}from"./chunks/framework.BQiMBqTz.js";const U=JSON.parse('{"title":"Reliability","description":"","frontmatter":{},"headers":[],"relativePath":"api/reliability.md","filePath":"api/reliability.md","lastUpdated":null}'),h={name:"api/reliability.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""};function f(g,i,_,m,F,E){const a=r("Badge");return d(),p("div",null,[i[20]||(i[20]=e('<h1 id="reliability" tabindex="-1">Reliability <a class="header-anchor" href="#reliability" aria-label="Permalink to &quot;Reliability&quot;">​</a></h1><h2 id="index" tabindex="-1">Index <a class="header-anchor" href="#index" aria-label="Permalink to &quot;Index&quot;">​</a></h2><ul><li><a href="#UncertaintyQuantification.DoubleLoop"><code>UncertaintyQuantification.DoubleLoop</code></a></li><li><a href="#UncertaintyQuantification.FORM"><code>UncertaintyQuantification.FORM</code></a></li><li><a href="#UncertaintyQuantification.RandomSlicing"><code>UncertaintyQuantification.RandomSlicing</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, FORM}"><code>UncertaintyQuantification.probability_of_failure</code></a></li><li><a href="#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{&lt;:UQModel}}, Function, Union{UQInput, Vector{&lt;:UQInput}}, AbstractMonteCarlo}"><code>UncertaintyQuantification.probability_of_failure</code></a></li></ul><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2>',4)),t("details",c,[t("summary",null,[i[0]||(i[0]=t("a",{id:"UncertaintyQuantification.FORM",href:"#UncertaintyQuantification.FORM"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.FORM")],-1)),i[1]||(i[1]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FORM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,tol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1e-3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,fdm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FiniteDifferencesMethod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralFiniteDifferences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>used to perform the first order reliability method using the HLRF algorithm with <code>n</code> iterations and tolerance <code>tol</code>. Gradients are estimated through <code>fdm</code>.</p><p><strong>References</strong></p><p>[<a href="/UncertaintyQuantification.jl/previews/PR248/references#rackwitzStructuralReliability1978">12</a>]</p>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[2]||(i[2]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ebff86efa14b681120e51a647d9535ad9c32e78c/src/reliability/form.jl#L1-L9",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),t("details",k,[t("summary",null,[i[4]||(i[4]=t("a",{id:"UncertaintyQuantification.DoubleLoop",href:"#UncertaintyQuantification.DoubleLoop"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.DoubleLoop")],-1)),i[5]||(i[5]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DoubleLoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',1)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[6]||(i[6]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ebff86efa14b681120e51a647d9535ad9c32e78c/src/reliability/probabilityoffailure_imprecise.jl#L2-L4",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),t("details",u,[t("summary",null,[i[8]||(i[8]=t("a",{id:"UncertaintyQuantification.RandomSlicing",href:"#UncertaintyQuantification.RandomSlicing"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.RandomSlicing")],-1)),i[9]||(i[9]=n()),s(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">RandomSlicing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractSimulation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',1)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[10]||(i[10]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ebff86efa14b681120e51a647d9535ad9c32e78c/src/reliability/probabilityoffailure_imprecise.jl#L9-L11",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),i[21]||(i[21]=t("h2",{id:"methods",tabindex:"-1"},[n("Methods "),t("a",{class:"header-anchor",href:"#methods","aria-label":'Permalink to "Methods"'},"​")],-1)),t("details",y,[t("summary",null,[i[12]||(i[12]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, FORM}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, FORM}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[13]||(i[13]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[15]||(i[15]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel},UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput},UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FORM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a reliability analysis using the first order reliability method (FORM), see <a href="/UncertaintyQuantification.jl/previews/PR248/api/reliability#UncertaintyQuantification.FORM"><code>FORM</code></a>. Returns the estimated probability of failure <code>pf</code>, the reliability index <code>β</code> and the design point <code>dp</code>.</p><p><strong>Examples</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pf, β, dp = probability_of_failure(model, performance, inputs, sim)</span></span></code></pre></div>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[14]||(i[14]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ebff86efa14b681120e51a647d9535ad9c32e78c/src/reliability/form.jl#L24-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),t("details",b,[t("summary",null,[i[16]||(i[16]=t("a",{id:"UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, AbstractMonteCarlo}",href:"#UncertaintyQuantification.probability_of_failure-Tuple{Union{UQModel, Vector{<:UQModel}}, Function, Union{UQInput, Vector{<:UQInput}}, AbstractMonteCarlo}"},[t("span",{class:"jlbinding"},"UncertaintyQuantification.probability_of_failure")],-1)),i[17]||(i[17]=n()),s(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[19]||(i[19]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">probability_of_failure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(models</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQModel},UQModel}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,performance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),inputs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Vector{&lt;:UQInput},UQInput}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sim</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMonteCarlo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Perform a reliability analysis with a standard Monte Carlo simulation. Returns the estimated probability of failure <code>pf</code>, the standard deviation <code>σ</code> and the <code>DataFrame</code> containing the evaluated <code>samples</code>. The simulation <code>sim</code> can be any instance of <code>AbstractMonteCarlo</code>.</p><p><strong>Examples</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pf, σ, samples = probability_of_failure(model, performance, inputs, sim)</span></span></code></pre></div>',4)),s(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>i[18]||(i[18]=[t("a",{href:"https://github.com/FriesischScott/UncertaintyQuantification.jl/blob/ebff86efa14b681120e51a647d9535ad9c32e78c/src/reliability/probabilityoffailure.jl#L1-L12",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})])])}const Q=o(h,[["render",f]]);export{U as __pageData,Q as default};
